<?php

namespace Tests\Feature\Api;

use Lib\Models\Car;
use Lib\Models\CarType;
use Lib\Models\Run;
use Lib\Models\User;
use Lib\Models\Waypoint;
use \Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class AddUserToRunTest extends TestCase
{
    use DatabaseMigrations;
    public function setUp()
    {
      parent::setUp(); // TODO: Change the autogenerated stub
      //create a user to authenticate
      $this->createDefaultUser();
    }
    /**
     * @test
     */
    
  /**
   * @test
   */
  public function addUserToRun()
  {
    /**
     * @var $run Run
     */
    $run = factory(Run::class)->create();
    $user = factory(User::class)->create();
    $res = $this->json("POST","/api/runs/{$run->id}/runners",["user"=>$user->id], ["x-access-token"=>$user->getAccessToken()]);
    $res->assertStatus(200)->assertJson([
      "status"=>"missing_car"
    ]);
    $this->assertEquals($run->subscriptions()->getResults()->count(),1);//there must only be one subscription
    $this->assertNotNull($run->subscriptions()->getResults()->first()->user);
    $this->assertEquals($run->subscriptions()->getResults()->first()->user->id,$user->id);
    $this->assertEquals($user->fresh()->status,"taken");
  }
  public function testAddNonFreeUserToRun()
  {
    /**
     * @var $run Run
     */
    $run = factory(Run::class)->create();
    $user = factory(User::class)->create();
    $car = factory(Car::class)->create();
    $res = $this->json("POST","/api/runs/{$run->id}/runners",["user"=>$user->id,"car"=>$car->id], ["x-access-token"=>$user->getAccessToken()]);
    $res->assertStatus(200);
    $this->assertEquals($run->subscriptions()->getResults()->count(),1);//there must only be one subscription
    $this->assertNotNull($run->subscriptions()->getResults()->first()->user);
    $this->assertEquals($run->subscriptions()->getResults()->first()->user->id,$user->id);
    $this->assertEquals($user->fresh()->status,"taken");
    $this->assertEquals($car->fresh()->status,"taken");
    
    $run2 = factory(Run::class)->create();
    $car2 = factory(Car::class)->create();
    $res = $this->json("POST","/api/runs/{$run2->id}/runners",["user"=>$user->id,"car"=>$car2->id], ["x-access-token"=>$user->getAccessToken()]);
    $user->fresh();
    $res->assertStatus(400);
    $this->assertEquals($run2->subscriptions()->getResults()->count(),0);//there must only be one subscription
    $this->assertEquals($user->fresh()->status,"taken");
  }
  /**
   * @test
   */
  public function addUserAndCarToRun()
  {
    $run = factory(Run::class)->create();
    $user = factory(User::class)->create();
    $car = factory(Car::class)->create();
    $res = $this->json("POST","/api/runs/{$run->id}/runners",["user"=>$user->id,"car"=>$car->id], ["x-access-token"=>$user->getAccessToken()]);
    $res->assertStatus(200)->assertJson([
      "status"=>"ready_to_go"
    ]);
    $this->assertEquals($run->subscriptions()->getResults()->count(),1);//there must only be one subscription
    $this->assertNotNull($run->subscriptions()->getResults()->first()->user);
    $this->assertEquals($run->subscriptions()->getResults()->first()->user->id,$user->id);
    $this->assertNotNull($run->subscriptions()->getResults()->first()->car);
    $this->assertEquals($run->subscriptions()->getResults()->first()->car->id,$car->id);
    $this->assertEquals($user->fresh()->status,"taken");
    $this->assertEquals($car->fresh()->status,"taken");
  }
}
